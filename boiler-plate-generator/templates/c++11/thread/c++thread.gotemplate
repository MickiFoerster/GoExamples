{{define "threadImport"}}
#include <iostream>
#include <thread>
{{end}}

{{define "threadWorkerFunctionHeader"}}
{{.WorkerFunctionReturnType}} {{.WorkerFunctionName}} ( 
    {{ if not .WorkerFunctionArgs }} 
      void
    {{ else }}
      {{ $n := len .WorkerFunctionArgs }}
      {{ range $i, $arg := .WorkerFunctionArgs }}
        {{.Type}} {{.Name}}{{if ne (plus1 $i) $n}},{{end}}
      {{ end }}
    {{ end }}
  ) {
  {{.WorkerFunctionDefintions}}
{{end}}

{{define "threadWorkerFunctionTail"}}
  {{.WorkerFunctionReturnStmt}}
}
{{end}}

{{define "threadWorkerFunction"}}
{{template "c++11ThreadWorkerFunctionHeader" . }}
{{template "c++11ThreadWorkerFunctionTail" . }}
{{end}}

{{define "threadScopeDefinitions"}}
{{end}}

{{define "threadCreateError"}}
{{end}}

{{define "threadCreate"}}
  std::thread thr {
    {{.WorkerFunctionName}},
    {{ $n := len .WorkerFunctionArgs }}
    {{ range $i, $arg := .WorkerFunctionArgs }}
      {{.Name}}{{if ne (plus1 $i) $n}},{{end}}
    {{ end }}
  };
{{end}}

{{define "threadJoinError"}}
{{end}}

{{define "threadJoin"}} thr.join(); {{end}}

{{define "globalScope"}}
{{template "threadWorkerFunction" . }}
{{end}}


