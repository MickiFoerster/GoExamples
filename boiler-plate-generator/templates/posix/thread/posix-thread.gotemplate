{{define "threadImport"}}
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
{{end}}

{{define "threadWorkerFunctionHeader"}}
{{.WorkerFunctionReturnType}} {{.WorkerFunctionName}} ( 
    {{ if not .WorkerFunctionArgs }} 
      void
    {{ else }}
      void *argv
    {{ end }}
  ) {
  {{ range $arg := .WorkerFunctionArgs }}
    {{.Type}} {{.Name}} = ((struct args_s *)argv)->{{.Name}};
  {{ end }}
  {{.WorkerFunctionDefintions}}
{{end}}

{{define "threadWorkerFunctionTail"}}
  {{.WorkerFunctionReturnStmt}}
}
{{end}}

{{define "threadWorkerFunction"}}
{{template "posixThreadWorkerFunctionHeader" . }}
{{template "posixThreadWorkerFunctionTail" . }}
{{end}}

{{define "threadScopeDefinitions"}}
  int pthread_rc;
  pthread_t tid;
  struct args_s args;
  {{ range $arg := .WorkerFunctionArgs }}
    {{.Type}} {{.Name}};
  {{ end }}
{{end}}

{{define "threadCreateError"}}
void pthread_create_error(int pthread_rc) {
    fprintf(stderr, "pthread_create() failed (code %d)\n", pthread_rc);
    exit(EXIT_FAILURE);
}
{{end}}

{{define "threadCreate"}}
  {{ range $arg := .WorkerFunctionArgs }}
  args.{{.Name}} = {{.Name}};
  {{ end }}
  pthread_rc = pthread_create(&tid, NULL, {{.WorkerFunctionName}}, &args);
  if (pthread_rc!=0) {
    pthread_create_error(pthread_rc);
  }
{{end}}

{{define "threadJoinError"}}
void pthread_join_error(int pthread_rc) {
    fprintf(stderr, "pthread_join() failed (code %d)\n", pthread_rc);
    exit(EXIT_FAILURE);
}
{{end}}

{{define "threadJoin"}}
  pthread_rc = pthread_join(tid, NULL);
  if (pthread_rc!=0) {
    pthread_join_error(pthread_rc);
  }
{{end}}

{{define "globalScope"}}
struct args_s {
  {{ range $arg := .WorkerFunctionArgs }}
    {{.Type}} {{.Name}};
  {{ end }}
};
{{template "threadWorkerFunction" . }}
{{end}}

