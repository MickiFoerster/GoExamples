#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#define RETURN_CODE_ERROR -1
#define RETURN_CODE_OK 0

static void readOutput(char const * const buf, ssize_t const n) {
  ssize_t i;
  const char msg[] = "read from pipe: ";
  fprintf(stderr, msg);
  for (i = 0; i < n; ++i) {
    if (buf[i] == '\n') {
      fprintf(stderr, "\n%s", msg);
    } else {
      fprintf(stderr, "%c", buf[i]);
    }
  }
}

static int redirectFileDescriptor(int src, int dst) {
  int rc;
  for (;;) {
    rc = dup2(src, dst);
    if (rc == -1) {
      if (errno == EINTR)
        continue;
      perror("dup2 failed");
      return RETURN_CODE_ERROR;
    }
    break;
  }
  return RETURN_CODE_OK;
}

int callCommand(void) {
  int rc;
  int filedes[2];

  rc = pipe(filedes);
  if (rc == -1) {
    perror("pipe");
    return RETURN_CODE_ERROR;
  }
  pid_t pid = fork();
  if (pid == -1) {
    perror("fork failed");
    return RETURN_CODE_ERROR;
  } else if (pid == 0) { // child process
    const char path[] = "{{.Path}}";
    char *const args[] = {
    {{range $arg := .Args}} "{{$arg}}", {{end}}
      NULL
    };
    rc = redirectFileDescriptor(filedes[1], STDOUT_FILENO);
    if (rc != RETURN_CODE_OK) {
      return RETURN_CODE_ERROR;
    }
    rc = redirectFileDescriptor(filedes[1], STDERR_FILENO);
    if (rc != RETURN_CODE_OK) {
      return RETURN_CODE_ERROR;
    }
    close(filedes[0]); // close exit for child
    close(filedes[1]); // close entrance of pipe
    rc = execv(path, args);
    if (rc < 0) {
      fprintf(stderr, "execv failed: %s\n", strerror(errno));
      return RETURN_CODE_ERROR;
    }
    assert(0 && "Here execution MAY never arrive");
  } else {             // parent
    close(filedes[1]); // close entrance of pipe in parent process
    // Now parent process reads from exit of pipe
    char buf[4096];
    int status = 0;

    for (;;) {
      ssize_t n = read(filedes[0], buf, sizeof(buf));
      if (n == -1) {
        if (errno == EINTR || errno == EAGAIN) {
          continue;
        } else {
          perror("read");
          return RETURN_CODE_ERROR;
        }
      } else if (n == 0) {
        break; // EOF
      } else {
        readOutput(buf, n);
      }
    }

    rc = waitpid(pid, &status, 0);
    if (rc == -1) {
      perror("waitpid failed");
      return RETURN_CODE_ERROR;
    }
    if (rc==pid && WIFEXITED(status) && 0 <= status && status <= 127 ) {
      fprintf(stderr, "Command execution finished with return code %d\n", WEXITSTATUS(status));
    } else {
      fprintf(stderr, "command execution with execv() failed\n");
    }

    close(filedes[0]); // close pipe exit for parent
  }

  return RETURN_CODE_OK;
}

int main() {
  return callCommand();
}

